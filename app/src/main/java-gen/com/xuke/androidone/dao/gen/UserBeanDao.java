package com.xuke.androidone.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xuke.androidone.model.bean.login.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Position = new Property(0, String.class, "position", false, "POSITION");
        public final static Property Birthday = new Property(1, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Alumni_id = new Property(2, String.class, "alumni_id", false, "ALUMNI_ID");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property GroupName = new Property(4, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Picture_xd = new Property(5, String.class, "picture_xd", false, "PICTURE_XD");
        public final static Property Profession = new Property(6, String.class, "profession", false, "PROFESSION");
        public final static Property AccountNum = new Property(7, String.class, "accountNum", true, "ACCOUNT_NUM");
        public final static Property PhoneNum = new Property(8, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property IntrestType = new Property(9, String.class, "intrestType", false, "INTREST_TYPE");
        public final static Property Token = new Property(10, String.class, "token", false, "TOKEN");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property WorkUtil = new Property(12, String.class, "workUtil", false, "WORK_UTIL");
        public final static Property PictureRT = new Property(13, String.class, "pictureRT", false, "PICTURE_RT");
        public final static Property DepartName = new Property(14, String.class, "departName", false, "DEPART_NAME");
        public final static Property Authenticated = new Property(15, String.class, "authenticated", false, "AUTHENTICATED");
        public final static Property IsChangedSex = new Property(16, String.class, "isChangedSex", false, "IS_CHANGED_SEX");
        public final static Property Hobby = new Property(17, String.class, "hobby", false, "HOBBY");
        public final static Property Channels = new Property(18, String.class, "channels", false, "CHANNELS");
        public final static Property RefreshToken = new Property(19, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property BaseInfoId = new Property(20, String.class, "baseInfoId", false, "BASE_INFO_ID");
        public final static Property Sign = new Property(21, String.class, "sign", false, "SIGN");
        public final static Property Picture = new Property(22, String.class, "picture", false, "PICTURE");
        public final static Property Email = new Property(23, String.class, "email", false, "EMAIL");
        public final static Property Address = new Property(24, String.class, "address", false, "ADDRESS");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"POSITION\" TEXT," + // 0: position
                "\"BIRTHDAY\" TEXT," + // 1: birthday
                "\"ALUMNI_ID\" TEXT," + // 2: alumni_id
                "\"SEX\" TEXT," + // 3: sex
                "\"GROUP_NAME\" TEXT," + // 4: groupName
                "\"PICTURE_XD\" TEXT," + // 5: picture_xd
                "\"PROFESSION\" TEXT," + // 6: profession
                "\"ACCOUNT_NUM\" TEXT PRIMARY KEY NOT NULL ," + // 7: accountNum
                "\"PHONE_NUM\" TEXT," + // 8: phoneNum
                "\"INTREST_TYPE\" TEXT," + // 9: intrestType
                "\"TOKEN\" TEXT," + // 10: token
                "\"NAME\" TEXT," + // 11: name
                "\"WORK_UTIL\" TEXT," + // 12: workUtil
                "\"PICTURE_RT\" TEXT," + // 13: pictureRT
                "\"DEPART_NAME\" TEXT," + // 14: departName
                "\"AUTHENTICATED\" TEXT," + // 15: authenticated
                "\"IS_CHANGED_SEX\" TEXT," + // 16: isChangedSex
                "\"HOBBY\" TEXT," + // 17: hobby
                "\"CHANNELS\" TEXT," + // 18: channels
                "\"REFRESH_TOKEN\" TEXT," + // 19: refreshToken
                "\"BASE_INFO_ID\" TEXT," + // 20: baseInfoId
                "\"SIGN\" TEXT," + // 21: sign
                "\"PICTURE\" TEXT," + // 22: picture
                "\"EMAIL\" TEXT," + // 23: email
                "\"ADDRESS\" TEXT);"); // 24: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(1, position);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(2, birthday);
        }
 
        String alumni_id = entity.getAlumni_id();
        if (alumni_id != null) {
            stmt.bindString(3, alumni_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String picture_xd = entity.getPicture_xd();
        if (picture_xd != null) {
            stmt.bindString(6, picture_xd);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(7, profession);
        }
 
        String accountNum = entity.getAccountNum();
        if (accountNum != null) {
            stmt.bindString(8, accountNum);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(9, phoneNum);
        }
 
        String intrestType = entity.getIntrestType();
        if (intrestType != null) {
            stmt.bindString(10, intrestType);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String workUtil = entity.getWorkUtil();
        if (workUtil != null) {
            stmt.bindString(13, workUtil);
        }
 
        String pictureRT = entity.getPictureRT();
        if (pictureRT != null) {
            stmt.bindString(14, pictureRT);
        }
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(15, departName);
        }
 
        String authenticated = entity.getAuthenticated();
        if (authenticated != null) {
            stmt.bindString(16, authenticated);
        }
 
        String isChangedSex = entity.getIsChangedSex();
        if (isChangedSex != null) {
            stmt.bindString(17, isChangedSex);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(18, hobby);
        }
 
        String channels = entity.getChannels();
        if (channels != null) {
            stmt.bindString(19, channels);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(20, refreshToken);
        }
 
        String baseInfoId = entity.getBaseInfoId();
        if (baseInfoId != null) {
            stmt.bindString(21, baseInfoId);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(22, sign);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(23, picture);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(24, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(25, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(1, position);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(2, birthday);
        }
 
        String alumni_id = entity.getAlumni_id();
        if (alumni_id != null) {
            stmt.bindString(3, alumni_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String picture_xd = entity.getPicture_xd();
        if (picture_xd != null) {
            stmt.bindString(6, picture_xd);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(7, profession);
        }
 
        String accountNum = entity.getAccountNum();
        if (accountNum != null) {
            stmt.bindString(8, accountNum);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(9, phoneNum);
        }
 
        String intrestType = entity.getIntrestType();
        if (intrestType != null) {
            stmt.bindString(10, intrestType);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String workUtil = entity.getWorkUtil();
        if (workUtil != null) {
            stmt.bindString(13, workUtil);
        }
 
        String pictureRT = entity.getPictureRT();
        if (pictureRT != null) {
            stmt.bindString(14, pictureRT);
        }
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(15, departName);
        }
 
        String authenticated = entity.getAuthenticated();
        if (authenticated != null) {
            stmt.bindString(16, authenticated);
        }
 
        String isChangedSex = entity.getIsChangedSex();
        if (isChangedSex != null) {
            stmt.bindString(17, isChangedSex);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(18, hobby);
        }
 
        String channels = entity.getChannels();
        if (channels != null) {
            stmt.bindString(19, channels);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(20, refreshToken);
        }
 
        String baseInfoId = entity.getBaseInfoId();
        if (baseInfoId != null) {
            stmt.bindString(21, baseInfoId);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(22, sign);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(23, picture);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(24, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(25, address);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // position
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // birthday
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alumni_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picture_xd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // profession
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accountNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phoneNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // intrestType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // token
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // workUtil
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pictureRT
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // departName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // authenticated
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // isChangedSex
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // hobby
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // channels
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // refreshToken
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // baseInfoId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // sign
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // picture
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // email
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setPosition(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBirthday(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlumni_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicture_xd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProfession(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoneNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIntrestType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWorkUtil(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPictureRT(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDepartName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAuthenticated(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsChangedSex(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHobby(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setChannels(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRefreshToken(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBaseInfoId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSign(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPicture(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setEmail(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAddress(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getAccountNum();
    }
    
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getAccountNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getAccountNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
